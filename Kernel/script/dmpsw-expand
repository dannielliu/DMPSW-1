#! /bin/bash
:<<EOF
 *  $Id: dmpsw-expand, 2014-08-18 17:31:51 DAMPE $
 *  Author(s):
 *    Chi WANG (chiwang@mail.ustc.edu.cn) 26/04/2014
 *-----------------------------------------------------
 *  use this command to create a template of algorithm
 *-----------------------------------------------------
EOF

#-------------------------------------------------------------------
Help(){
cat<<EOF

Usage: dmpsw-expand [OPTION] NewModuleName

  --help                    output help information
  --event       or  --evt   create a template of event
  --algorithm   or  --alg   create a template of algorithm
  --service     or  --svc   create a template of service

EOF
  exit 1
}

NewEvtModule(){
  mkdir -p Evt$1/include Evt$1/src
#-------------------------------------------------------------------
cat > Evt$1/Readme.md <<EOF
        DMPSW:    DmpEvt$1
>--------------------------------------------

Note:
-------------
    1.  finish your class
        in DmpEvt${1}.h(.cc)
    2.  create dictionary
        dmpCreateDictionary
    3.  compile the event module
        scons
EOF

#-------------------------------------------------------------------
cat > Evt$1/SConstruct <<EOF
'''
 *  \$Id: SConstruct, ${date} DAMPE $
 *----------------------------------------------------------
 *  This file is generated by dmpse-expand
 *----------------------------------------------------------
'''

import os

target='DmpEvt$1'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
#env.ParseConfig("dmpsw-config --include")
env.ParseConfig("root-config --cflags --libs")

#-------------------------------------------------------------------
# include dir. and external libs
env.Prepend(CPPPATH=['./include'])

# installation
prefix=os.environ['DMPSWWORK']
#--------------------------------------------------------------------
for tmp in os.listdir('./include'):
    if "." not in tmp[0] and "LinkDef" not in tmp and "Dictionary" not in tmp and ".h" in tmp:
        Default(Command(prefix+'/include/'+tmp,'./include/'+tmp,Copy("\$TARGET","\$SOURCE")))

#-------------------------------------------------------------------
# main build
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(prefix+'/lib/lib'+target+".so",goal))
if env['PLATFORM'] == 'darwin':    #MacOS
    Default(env.InstallAs(prefix+'/lib/lib'+target+".dylib",goal))

EOF

#-------------------------------------------------------------------
cat > Evt$1/include/DmpEvt${1}.h <<EOF
/*   \$Id: DmpEvt${1}.h, ${date} DAMPE $
 *--------------------------------------------------------
 *  Author(s):
 *
 *--------------------------------------------------------
*/

#ifndef DmpEvt${1}_H
#define DmpEvt${1}_H

#include "TObject.h"

class DmpEvt${1} : public TObject{
/*
 *  DmpEvt${1}
 *
 */
public:
  DmpEvt${1}();
  ~DmpEvt${1}();

  void Reset();

private:
  /*
   *  Define your data members at here
   *
   */
  
  ClassDef(DmpEvt$1,1)

};

#endif
EOF
#-------------------------------------------------------------------
cat > Evt$1/src/DmpEvt${1}.cc <<EOF
/*   \$Id: DmpEvt${1}.cc, ${date} DAMPE $
 *--------------------------------------------------------
 *  Author(s):
 *
 *--------------------------------------------------------
*/

#include "DmpEvt${1}.h"

ClassImp(DmpEvt${1})

DmpEvt${1}::DmpEvt${1}()
{
}

DmpEvt${1}::~DmpEvt${1}()
{
}

void DmpEvt${1}::Reset()
{
}
EOF

#-------------------------------------------------------------------
cat > Evt$1/include/DmpEvt${1}LinkDef.h <<EOF
#ifdef __CINT__

#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ class DmpEvt${1}+;

#endif

EOF
}

NewModule(){
  mkdir -p $1$2/include $1$2/src $1$2/share
#-------------------------------------------------------------------
cat > $1$2/Readme.md <<EOF
        DMPSW:    Dmp${1}${2}
>--------------------------------------------

Note:
-------------
EOF
#-------------------------------------------------------------------
cat > $1$2/SConstruct <<EOF
'''
 *  \$Id: SConstruct, ${date} DAMPE $
 *----------------------------------------------------------
 *  This file is generated by dmpsw-expand
 *----------------------------------------------------------
'''

import os

target='Dmp$1$2'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
env.ParseConfig("dmpsw-config --include --libs")
env.ParseConfig("python-config --include --libs")
env.ParseConfig("root-config --cflags --libs")
#env.ParseConfig("clhep-config --include --libs")
#env.PrependENVPath('PATH', os.environ['G4INSTALL']+'/../../../bin')    # 2 lines for G4
#env.ParseConfig("geant4-config --cflags --libs")
#env.MergeFlags('-fopenmp')

#-------------------------------------------------------------------
# include dir. and external libs
env.Prepend(CPPPATH=['./include'])
#env.Append(LIBS=['YourEventModule'])   # link your event module, only for algorithm

#-------------------------------------------------------------------
# main build
prefix=os.environ['DMPSWWORK']
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(prefix+'/lib/lib'+target+".so",goal))
if env['PLATFORM'] == 'darwin':    #MacOS
    Default(env.InstallAs(prefix+'/lib/lib'+target+".dylib",goal))
EOF
#-------------------------------------------------------------------
cat > $1$2/src/Dmp${1}${2}Binding.cc <<EOF
#include <boost/python.hpp>
#include "Dmp$1${2}.h"

BOOST_PYTHON_MODULE(libDmp$1${2}){
  using namespace boost::python;

  class_<Dmp$1${2},boost::noncopyable,bases<DmpV$1> >("Dmp$1${2}",init<>());
}
EOF
#-------------------------------------------------------------------
cat > $1$2/include/Dmp${1}${2}.h <<EOF
#ifndef Dmp${1}${2}_H
#define Dmp${1}${2}_H

#include "DmpV${1}.h"

class Dmp${1}${2} : public DmpV$1{
/*
 *  Dmp${1}${2}
 *
 */
public:
  Dmp${1}${2}();
  ~Dmp${1}${2}();

  //void Set(const std::string &type,const std::string &value);
  // if you need to set some options for your algorithm at run time. Overload Set()
  bool Initialize();
  //bool ProcessThisEvent();    // only for algorithm
  bool Finalize();

};

#endif
EOF
#-------------------------------------------------------------------
cat > $1$2/src/Dmp${1}${2}.cc <<EOF
#include "Dmp$1${2}.h"

//-------------------------------------------------------------------
Dmp${1}${2}::Dmp${1}${2}()
 :DmpV${1}("${2}")
{
}

//-------------------------------------------------------------------
Dmp${1}${2}::~Dmp${1}${2}(){
}

//-------------------------------------------------------------------
bool Dmp${1}${2}::Initialize(){
  return true;
}

//-------------------------------------------------------------------
//bool Dmp${1}${2}::ProcessThisEvent(){
//  return true;
//}

//-------------------------------------------------------------------
bool Dmp${1}${2}::Finalize(){
  return true;
}

EOF
 
}

#-------------------------------------------------------------------
if [ '--help' == $1 ];then
  Help
fi
if [ $# != 2 ];then
  echo "Must give a name for the new module:"
  echo ""
  echo "    dmpsw-expand $1 aName"
  exit 1
fi

#-------------------------------------------------------------------
date=`date --rfc-3339=seconds`

#-------------------------------------------------------------------
case $1 in
  --event)
    NewEvtModule $2
    ;;
  --algorithm)
    NewModule Alg $2
    ;;
  --service)
    NewModule Svc $2
    ;;
  --evt)
    NewEvtModule $2
    ;;
  --alg)
    NewModule Alg $2
    ;;
  --svc)
    NewModule Svc $2
    ;;
  --help)
    Help
    ;;
  *)
    echo "dmpsw-expand: '$1' is not a dmpsw-expand command"
    echo ""
    echo "    See 'dmpsw-expand --help'"
    ;;
esac

